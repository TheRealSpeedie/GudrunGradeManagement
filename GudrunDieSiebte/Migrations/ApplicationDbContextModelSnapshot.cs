// <auto-generated />
using System;
using GudrunDieSiebte.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GudrunDieSiebte.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GudrunDieSiebte.Models.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("confirmed")
                        .HasColumnType("bit");

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Person");

                    b.ToTable("Absence");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.AbsenceLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("fk_Absence")
                        .HasColumnType("int");

                    b.Property<int>("fk_Lesson")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Absence");

                    b.HasIndex("fk_Lesson");

                    b.ToTable("AbsenceLesson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.AbsencePerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("fk_Absence")
                        .HasColumnType("int");

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.Property<bool>("isVisible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("fk_Absence");

                    b.HasIndex("fk_Person");

                    b.ToTable("AbsencePerson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Person");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_teacher")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_teacher");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ClassCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("fk_Class")
                        .HasColumnType("int");

                    b.Property<int>("fk_Course")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Class");

                    b.HasIndex("fk_Course");

                    b.ToTable("ClassCourse");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ClassRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ClassRoom");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("modulId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("modulId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Examday")
                        .HasColumnType("datetime2");

                    b.Property<int>("Highscore")
                        .HasColumnType("int");

                    b.Property<int?>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Thema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("fk_Modul")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("fk_Modul");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("fk_Exam")
                        .HasColumnType("int");

                    b.Property<int>("fk_Student")
                        .HasColumnType("int");

                    b.Property<float>("grade")
                        .HasColumnType("real");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("fk_Exam");

                    b.HasIndex("fk_Student");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_Class")
                        .HasColumnType("int");

                    b.Property<int>("fk_ClassRoom")
                        .HasColumnType("int");

                    b.Property<int>("fk_Modul")
                        .HasColumnType("int");

                    b.Property<int>("fk_Teacher")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Class");

                    b.HasIndex("fk_ClassRoom");

                    b.HasIndex("fk_Modul");

                    b.HasIndex("fk_Teacher");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Modul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Modul");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("fk_Class")
                        .HasColumnType("int");

                    b.Property<int>("fk_Modul")
                        .HasColumnType("int");

                    b.Property<int>("fk_Teacher")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Class");

                    b.HasIndex("fk_Modul");

                    b.HasIndex("fk_Teacher");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("fk_user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isTeacher")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.SchoolManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SchoolManagement");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Person");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_Class")
                        .HasColumnType("int");

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.Property<int>("fk_TeachingCompany")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Class");

                    b.HasIndex("fk_Person");

                    b.HasIndex("fk_TeachingCompany");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.StudentToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Done")
                        .HasColumnType("bit");

                    b.Property<int>("fk_Student")
                        .HasColumnType("int");

                    b.Property<int>("fk_ToDo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Student");

                    b.HasIndex("fk_ToDo");

                    b.ToTable("StudentToDo");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_Person")
                        .HasColumnType("int");

                    b.Property<int>("fk_SchoolManagement")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Person");

                    b.HasIndex("fk_SchoolManagement");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.TeachingCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeachingCompany");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("fk_Class")
                        .HasColumnType("int");

                    b.Property<int>("fk_Modul")
                        .HasColumnType("int");

                    b.Property<int>("fk_Teacher")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fk_Class");

                    b.HasIndex("fk_Modul");

                    b.HasIndex("fk_Teacher");

                    b.ToTable("ToDo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Absence", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany("Absences")
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.AbsenceLesson", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Absence", "Absence")
                        .WithMany("AbsenceLesson")
                        .HasForeignKey("fk_Absence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Lesson", "Lesson")
                        .WithMany("AbsenceLesson")
                        .HasForeignKey("fk_Lesson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Absence");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.AbsencePerson", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Absence", "Absence")
                        .WithMany("AbsencePerson")
                        .HasForeignKey("fk_Absence")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany("AbsencePerson")
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Absence");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Appointment", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany("Appointments")
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Class", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Teacher", "Teacher")
                        .WithMany("Class")
                        .HasForeignKey("fk_teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ClassCourse", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Class", "Class")
                        .WithMany("ClassCourse")
                        .HasForeignKey("fk_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Course", "Course")
                        .WithMany("ClassCourse")
                        .HasForeignKey("fk_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Course", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Modul", "modul")
                        .WithMany("Course")
                        .HasForeignKey("modulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("modul");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Exam", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Teacher", null)
                        .WithMany("Exams")
                        .HasForeignKey("TeacherId");

                    b.HasOne("GudrunDieSiebte.Models.Modul", "Modul")
                        .WithMany("Exam")
                        .HasForeignKey("fk_Modul")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modul");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Grade", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Exam", "Exam")
                        .WithMany("grades")
                        .HasForeignKey("fk_Exam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("fk_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Lesson", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Class", "Class")
                        .WithMany("Lessons")
                        .HasForeignKey("fk_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.ClassRoom", "ClassRoom")
                        .WithMany("Lessons")
                        .HasForeignKey("fk_ClassRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Modul", "Modul")
                        .WithMany("Lessons")
                        .HasForeignKey("fk_Modul")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Teacher", "Teacher")
                        .WithMany("Lessons")
                        .HasForeignKey("fk_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ClassRoom");

                    b.Navigation("Modul");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Notification", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Class", "Class")
                        .WithMany("Notifications")
                        .HasForeignKey("fk_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Modul", "Modul")
                        .WithMany("Notification")
                        .HasForeignKey("fk_Modul")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Teacher", "Teacher")
                        .WithMany("Notifications")
                        .HasForeignKey("fk_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Modul");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Person", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Setting", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany("Settings")
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Student", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Class", "Class")
                        .WithMany("Students")
                        .HasForeignKey("fk_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.TeachingCompany", "TeachingCompany")
                        .WithMany("Students")
                        .HasForeignKey("fk_TeachingCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Person");

                    b.Navigation("TeachingCompany");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.StudentToDo", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("fk_Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.ToDo", "ToDo")
                        .WithMany()
                        .HasForeignKey("fk_ToDo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("ToDo");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Teacher", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("fk_Person")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.SchoolManagement", "SchoolManagement")
                        .WithMany("Teachers")
                        .HasForeignKey("fk_SchoolManagement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("SchoolManagement");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ToDo", b =>
                {
                    b.HasOne("GudrunDieSiebte.Models.Class", "Class")
                        .WithMany()
                        .HasForeignKey("fk_Class")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Modul", "Modul")
                        .WithMany()
                        .HasForeignKey("fk_Modul")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GudrunDieSiebte.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("fk_Teacher")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Modul");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Absence", b =>
                {
                    b.Navigation("AbsenceLesson");

                    b.Navigation("AbsencePerson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Class", b =>
                {
                    b.Navigation("ClassCourse");

                    b.Navigation("Lessons");

                    b.Navigation("Notifications");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.ClassRoom", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Course", b =>
                {
                    b.Navigation("ClassCourse");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Exam", b =>
                {
                    b.Navigation("grades");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Lesson", b =>
                {
                    b.Navigation("AbsenceLesson");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Modul", b =>
                {
                    b.Navigation("Course");

                    b.Navigation("Exam");

                    b.Navigation("Lessons");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Person", b =>
                {
                    b.Navigation("AbsencePerson");

                    b.Navigation("Absences");

                    b.Navigation("Appointments");

                    b.Navigation("Settings");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.SchoolManagement", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Student", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.Teacher", b =>
                {
                    b.Navigation("Class");

                    b.Navigation("Exams");

                    b.Navigation("Lessons");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("GudrunDieSiebte.Models.TeachingCompany", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
